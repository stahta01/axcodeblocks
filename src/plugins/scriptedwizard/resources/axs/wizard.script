////////////////////////////////////////////////////////////////////////////////
//
// Code::Blocks new project wizard script
//
// Project: Axsem project
// Author:  www.axsem.com
//
//
////////////////////////////////////////////////////////////////////////////////

MemoryModelIndex <- 0;
BoardModelIndex <- 0;
IARDataModelIndex <- 1;
IARCallingConventionIndex <- 2;
IARConstantLocationIndex <- 1;

function BeginWizard()
{
    local intro_msg = _T("Welcome to the AXSEM project wizard!\n" +
                         "This wizard will guide you to create a new AXSEM AX8052 project.\n\n" +
                         "When you 're ready to proceed, please click \"Next\"...");

    // intro
    Wizard.AddInfoPage(_T("AxsemProjectIntro"), intro_msg);

    // select project name and path
    Wizard.AddProjectPathPage();

    // select compiler and configurations
    // args:
    //  1) string: which compiler ID will be pre-selected (empty means default)
    //  2) string: semi-colon separated list of allowed compiler ids. Use _T("*") for all. * and ? wildcards allowed.
    //  3) boolean: if false, the compiler selection will be disabled
    //  4) boolean: if false, the config targets will be disabled
    Wizard.AddCompilerPage(_T(""), _T("sdcc*;keil*;iar8051"), true, true);
    Wizard.AddPage(_T("memoryModelChoice"));
    Wizard.AddPage(_T("memoryModelChoiceIAR"));
}

function GetGeneratedFile(file_index)
{
    if (file_index == 0)
    {
        local path    = Wizard.FindTemplateFile(_T("axs/files/main.c"));
        local buffer  = IO.ReadFileContents(path);
        local brdhdrdvk2 = _T("#include <libdvk2leds.h>");
        local brdcfgdvk2 = _T("    // restore LEDs\n") +
                           _T("    PORTC = 0x03 | (PINC & 0x08);\n") +
                           _T("    PORTB = 0x3e;\n") +
                           _T("    PORTA = 0xc2 | (PINA & 0x25);\n") +
                           _T("    PORTR = 0x40;\n") +
                           _T("\n") +
                           _T("    DIRC = 0x0f;\n") +
                           _T("    DIRB = 0x03;\n") +
                           _T("    DIRA = 0x25;\n") +
                           _T("    DIRR = 0x15;\n") +
                           _T("\n") +
                           _T("    ANALOGA = 0x18;\n") +
                           _T("\n") +
                           _T("    MISCCTRL |= 0x02;\n");
        local brdhdrminikit = _T("#include <libminikitleds.h>");
        local brdcfgminikit = _T("    // restore LEDs\n") +
                              _T("    PORTA = 0xFF;\n") +
                              _T("    PORTB = 0xFD | (PINB & 0x02); // init LEDs to previous (frozen) state\n") +
                              _T("    PORTC = 0xFF;\n") +
                              _T("    PORTR = 0xCB;\n") +
                              _T("\n") +
                              _T("    DIRA = 0x00;\n") +
                              _T("    DIRB = 0x06; //  PB1 = LED, PB2 = TCXO ON/OFF\n") +
                              _T("    DIRC = 0x00; //  PC4 = button\n") +
                              _T("    DIRR = 0x15;\n") +
                              _T("\n") +
                              _T("    //PALTRADIO |= (1<<6);\n") +
                              _T("\n") +
                              _T("    ANALOGA = 0x18;\n") +
                              _T("\n") +
                              _T("    MISCCTRL |= 0x02;\n");
        switch (BoardModelIndex) {
            case 1:
                buffer.Replace(_T("[BOARD_HEADER]"), brdhdrminikit);
                buffer.Replace(_T("[BOARD_CONFIG]"), brdcfgminikit);
                buffer.Replace(_T("[LCD_HEADER]"), _T(""));
                buffer.Replace(_T("[LCD_PORTINIT]"), _T(""));
                buffer.Replace(_T("[LCD_INIT]"), _T(""));
                buffer.Replace(_T("[LCD_BANNER]"), _T(""));
                buffer.Replace(_T("[LCD_WRBANNER]"), _T(""));
                buffer.Replace(_T("[LCD_IDLEFLAGS]"), _T("            flg |= WTFLAG_CANSLEEP;\n"));
                break;

            default:
                buffer.Replace(_T("[BOARD_HEADER]"), brdhdrdvk2);
                buffer.Replace(_T("[BOARD_CONFIG]"), brdcfgdvk2);
                buffer.Replace(_T("[LCD_HEADER]"), _T("#include <libaxlcd2.h>\n"));
                buffer.Replace(_T("[LCD_PORTINIT]"), _T("    lcd2_portinit();\n"));
                buffer.Replace(_T("[LCD_INIT]"), _T("        lcd2_init();\n"));
                buffer.Replace(_T("[LCD_BANNER]"), _T("    static const char __code lcd_banner[] = \"Hello World...\\nAxsem\";\n"));
                buffer.Replace(_T("[LCD_WRBANNER]"), _T("        lcd2_writestr(lcd_banner);"));
                buffer.Replace(_T("[LCD_IDLEFLAGS]"), _T("            if (lcd2_txidle())\n                flg |= WTFLAG_CANSLEEP;\n"));
                break;
        }
        return _T("main.c;") + buffer;
    }
    return _T(""); // no other files
}

function GetFilesDir()
{
    return _T(""); // file is generated
}

function OnGetNextPage_CompilerPage()
{
        if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("iar8051")))
        {
            return _T("memoryModelChoiceIAR");
        }
        return _T("memoryModelChoice");
}

function OnEnter_memoryModelChoice(fwd)
{
    if (fwd)
    {
        Wizard.SetComboboxSelection(_T("comboboxMem"), ConfigManager.Read(_T("/mcs51_project_wizard/memorymodel"), 0));
        if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("sdcc*")))
        {
            Wizard.SetComboboxSelection(_T("comboboxMem"), 0);
        }
        Wizard.SetComboboxSelection(_T("comboboxBoard"), ConfigManager.Read(_T("/mcs51_project_wizard/boardmodel"), 0));
    }
    return true;
}

function OnLeave_memoryModelChoice(fwd)
{
    if (fwd)
    {
        MemoryModelIndex = Wizard.GetComboboxSelection(_T("comboboxMem"));
        ConfigManager.Write(_T("/mcs51_project_wizard/memorymodel"), MemoryModelIndex);
        BoardModelIndex = Wizard.GetComboboxSelection(_T("comboboxBoard"));
        ConfigManager.Write(_T("/mcs51_project_wizard/boardmodel"), BoardModelIndex);
    }
    return true;
}

function OnGetNextPage_memoryModelChoice()
{
    return _T("");
}

function OnGetPrevPage_memoryModelChoice()
{
    return _T("CompilerPage");
}

function OnEnter_memoryModelChoiceIAR(fwd)
{
    if (fwd)
    {
        Wizard.SetComboboxSelection(_T("comboboxIARDataModel"), ConfigManager.Read(_T("/mcs51_project_wizard/iardatamodel"), 1));
        Wizard.SetComboboxSelection(_T("comboboxIARCallingConvention"), ConfigManager.Read(_T("/mcs51_project_wizard/iarcallingconvention"), 2));
        Wizard.SetComboboxSelection(_T("comboboxIARConstantLocation"), ConfigManager.Read(_T("/mcs51_project_wizard/iarconstantlocation"), 1));
        Wizard.SetComboboxSelection(_T("comboboxIARBoard"), ConfigManager.Read(_T("/mcs51_project_wizard/boardmodel"), 0));
    }
    return true;
}

function OnLeave_memoryModelChoiceIAR(fwd)
{
    if (fwd)
    {
        IARDataModelIndex = Wizard.GetComboboxSelection(_T("comboboxIARDataModel"));
        ConfigManager.Write(_T("/mcs51_project_wizard/iardatamodel"), IARDataModelIndex);
        IARCallingConventionIndex = Wizard.GetComboboxSelection(_T("comboboxIARCallingConvention"));
        ConfigManager.Write(_T("/mcs51_project_wizard/iarcallingconvention"), IARCallingConventionIndex);
        IARConstantLocationIndex = Wizard.GetComboboxSelection(_T("comboboxIARConstantLocation"));
        ConfigManager.Write(_T("/mcs51_project_wizard/iarconstantlocation"), IARConstantLocationIndex);
        BoardModelIndex = Wizard.GetComboboxSelection(_T("comboboxIARBoard"));
        ConfigManager.Write(_T("/mcs51_project_wizard/boardmodel"), BoardModelIndex);
    }
    return true;
}

function OnGetNextPage_memoryModelChoiceIAR()
{
    return _T("");
}

function OnGetPrevPage_memoryModelChoiceIAR()
{
    return _T("CompilerPage");
}

function SetupProject(project)
{
    // NOTE: Major compiler system drawback here.
    // Until it is redesigned to allow easier compiler settings,
    // we have to check the compiler's ID and set options for different compilers...


    if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("sdcc*")))
    {
        project.AddCompilerOption(_T("--verbose"));
    }
    else if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("keil*")))
    {
         // enable compiler warnings (project-wide)
         WarningsOn(project, Wizard.GetCompilerID());
    }

    //local axsdbdir = ::wxString();
    //if (PLATFORM_MSW == PLATFORM)
    //{
    //    //if you uncomment this, you will get the paths for source level debugging
    //    //the standard libraries, but also a script security warning
    //    //axsdbdir = IO.ExecuteAndGetOutput(_T("axsdb --installdir"));
    //}
    //else
    //{
    //    axsdbdir = _T("/usr/share/microfoot");
    //}
    //if (!axsdbdir.IsEmpty())
    //{
    //    project.AddToExtensions(_T("/debuggeraxs/scriptadd/+search_path:add=") + axsdbdir + _T("/libmf/source"));
    //    project.AddToExtensions(_T("/debuggeraxs/scriptadd/+search_path:add=") + axsdbdir + _T("/libaxdvk2/source"));
    //    project.AddToExtensions(_T("/debuggeraxs/scriptadd/+search_path:add=") + axsdbdir + _T("/libax5031/source"));
    //    project.AddToExtensions(_T("/debuggeraxs/scriptadd/+search_path:add=") + axsdbdir + _T("/libax5042/source"));
    //    project.AddToExtensions(_T("/debuggeraxs/scriptadd/+search_path:add=") + axsdbdir + _T("/libax5043/source"));
    //    project.AddToExtensions(_T("/debuggeraxs/scriptadd/+search_path:add=") + axsdbdir + _T("/libax5051/source"));
    //}
    if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("sdcc*")))
    {
        project.AddCompilerOption(_T("-mmcs51"));
        switch (MemoryModelIndex) {
            case 0:
                //project.AddCompilerOption(_T("--model-small"));
                project.AddLinkLib(_T("libmf"));
                project.AddLinkLib(_T("libaxdvk2"));
                break;

            case 1:
                project.AddCompilerOption(_T("--model-large"));
                project.AddLinkLib(_T("libmflarge"));
                project.AddLinkLib(_T("libaxdvk2large"));
                break;

            default:
                break;
        }
        project.AddLinkerOption(_T("--xram-size 8192"));
        project.AddLinkerOption(_T("--iram-size 256"));
        project.AddLinkerOption(_T("--code-size 64512"));
    }
    else if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("keilc51")))
    {
        switch (MemoryModelIndex) {
            case 0:
                project.AddCompilerOption(_T("SMALL"));
                project.AddLinkLib(_T("libmf"));
                project.AddLinkLib(_T("libaxdvk2"));
                project.AddLinkLib(_T("C51S"));
                break;

            case 1:
                project.AddCompilerOption(_T("LARGE"));
                project.AddLinkLib(_T("libmflarge"));
                project.AddLinkLib(_T("libaxdvk2large"));
                project.AddLinkLib(_T("C51L"));
                break;

            default:
                break;
        }
        project.AddLinkerOption(_T("DW(6,16)"));
        project.AddLinkerOption(_T("RAMSIZE(256)"));
        project.AddLinkerOption(_T("XDATA(0x0-0x1FFF)"));
        project.AddLinkerOption(_T("CODE(0x0-0xFBFF)"));
    }
    else if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("keilcx51")))
    {
        switch (MemoryModelIndex) {
            case 0:
                project.AddCompilerOption(_T("SMALL"));
                project.AddLinkLib(_T("libmf"));
                project.AddLinkLib(_T("libaxdvk2"));
                project.AddLinkLib(_T("C51S"));
                break;

            case 1:
                project.AddCompilerOption(_T("LARGE"));
                project.AddLinkLib(_T("libmflarge"));
                project.AddLinkLib(_T("libaxdvk2large"));
                project.AddLinkLib(_T("C51L"));
                break;

            default:
                break;
        }
        project.AddLinkerOption(_T("DW(16,30,46)"));
        project.AddLinkerOption(_T("CLASSES (XDATA (X:0x0-X:0x1FFF), HDATA (X:0x0-X:0x1FFF), CODE (C:0x0-C:0xFBFF), CONST (C:0x0-C:0xFBFF), ECODE (C:0x0-C:0xFBFF), HCONST (C:0x0-C:0xFBFF))"));
    }
    else if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("iar8051")))
    {
        // IAR default install path: C:\Program Files\IAR Systems\Embedded Workbench x.xx\8051\bin\
        // Other projects IAR options
        // a8051.exe: -v0 -s+ -M<> -r -w+
        // icc8051.exe: -v0 --debug -e
        // xlink.exe: -Fubrof -D_PDATA_STACK_SIZE=0x80 -D_XDATA_STACK_SIZE=0xFFF -D_IDATA_STACK_SIZE=0x40 -D_EXTENDED_STACK_START=0x00 -D_EXTENDED_STACK_END=0x00 -D_EXTENDED_STACK_SIZE=0x00 -D_NR_OF_VIRTUAL_REGISTERS=8 -D_CODEBANK_START=0 -D_CODEBANK_END=0 -s __program_start cl-pli-nsdc-1e16x01.r51
        local libsuffix = _T("-pli-n");
        switch (IARDataModelIndex) {
            case 0:
                project.AddCompilerOption(_T("--data_model=tiny"));
                project.AddCompilerOption(_T("-D__DATA_MODEL__=0"));
                libsuffix = libsuffix + _T("t");
                break;

            case 1:
                project.AddCompilerOption(_T("--data_model=small"));
                project.AddCompilerOption(_T("-D__DATA_MODEL__=1"));
                libsuffix = libsuffix + _T("s");
                break;

            case 2:
                project.AddCompilerOption(_T("--data_model=large"));
                project.AddCompilerOption(_T("-D__DATA_MODEL__=2"));
                libsuffix = libsuffix + _T("l");
                break;

            case 3:
                project.AddCompilerOption(_T("--data_model=generic"));
                project.AddCompilerOption(_T("-D__DATA_MODEL__=3"));
                libsuffix = libsuffix + _T("g");
                break;

            case 4:
                project.AddCompilerOption(_T("--data_model=far_generic"));
                project.AddCompilerOption(_T("-D__DATA_MODEL__=5"));
                libsuffix = libsuffix + _T("j");
                break;

            case 5:
                project.AddCompilerOption(_T("--data_model=far"));
                project.AddCompilerOption(_T("-D__DATA_MODEL__=4"));
                libsuffix = libsuffix + _T("f");
                break;

            default:
                break;
        }
        switch (IARCallingConventionIndex) {
            case 0:
                project.AddCompilerOption(_T("--calling_convention=data_overlay"));
                project.AddCompilerOption(_T("-D__CALLING_CONVENTION__=0")); 
                libsuffix = libsuffix + _T("d");
                break;

            case 1:
                project.AddCompilerOption(_T("--calling_convention=idata_overlay"));
                project.AddCompilerOption(_T("-D__CALLING_CONVENTION__=1")); 
                libsuffix = libsuffix + _T("o");
                break;

            case 2:
                project.AddCompilerOption(_T("--calling_convention=idata_reentrant"));
                project.AddCompilerOption(_T("-D__CALLING_CONVENTION__=2")); 
                libsuffix = libsuffix + _T("i");
                break;

            case 3:
                project.AddCompilerOption(_T("--calling_convention=pdata_reentrant"));
                project.AddCompilerOption(_T("-D__CALLING_CONVENTION__=3")); 
                libsuffix = libsuffix + _T("p");
                break;

            case 4:
                project.AddCompilerOption(_T("--calling_convention=xdata_reentrant"));
                project.AddCompilerOption(_T("-D__CALLING_CONVENTION__=4")); 
                libsuffix = libsuffix + _T("x");
                break;

            case 5:
                project.AddCompilerOption(_T("--calling_convention=ext_stack_reentrant"));
                project.AddCompilerOption(_T("-D__CALLING_CONVENTION__=5")); 
                libsuffix = libsuffix + _T("e");
                break;

            default:
                break;
        }
        switch (IARConstantLocationIndex) {
            case 0:
                project.AddCompilerOption(_T("--place_constants=code"));
                libsuffix = libsuffix + _T("c");
                break;

            case 1:
                project.AddCompilerOption(_T("--place_constants=data"));
                libsuffix = libsuffix + _T("d");
                break;

            default:
                break;
        }
        libsuffix = libsuffix + _T("-1e16x01.r51");
        project.AddLinkLib(_T("cl") + libsuffix);
        project.AddLinkLib(_T("libmf") + libsuffix);
        project.AddLinkLib(_T("libaxdvk2") + libsuffix);
        //project.AddCompilerOption(_T("--debug"));
        project.AddCompilerOption(_T("-e"));
        project.AddCompilerOption(_T("-Om"));
        project.AddCompilerOption(_T("--clib"));
        project.AddCompilerOption(_T("--core=plain"));
        //project.AddCompilerOption(_T("-D__CORE__=1"));
        project.AddCompilerOption(_T("--code_model=near"));
        //project.AddCompilerOption(_T("-D__CODE_MODEL__=1"));
        // even though the core has 2 DPTRs, we only use one, because there is no precompiled
        // clib for 2 DPTR, and compiling a custom clib is very complex
        project.AddCompilerOption(_T("--dptr=16"));
        project.AddCompilerOption(_T("--dptr=1"));
        project.AddCompilerOption(_T("--dptr=separate"));
        project.AddCompilerOption(_T("--dptr=xor"));
        //project.AddCompilerOption(_T("-D__NUMBER_OF_DPTRS__=1"));
        project.AddCompilerOption(_T("--diag_suppress=Pa050"));
        project.AddLinkerOption(_T("-Fubrof"));
        project.AddLinkerOption(_T("-D_PDATA_STACK_SIZE=0x80"));
        project.AddLinkerOption(_T("-D_XDATA_STACK_SIZE=0xFFF"));
        project.AddLinkerOption(_T("-D_IDATA_STACK_SIZE=0x80"));
        project.AddLinkerOption(_T("-D_EXTENDED_STACK_START=0x00"));
        project.AddLinkerOption(_T("-D_EXTENDED_STACK_END=0x00"));
        project.AddLinkerOption(_T("-D_EXTENDED_STACK_SIZE=0x00"));
        project.AddLinkerOption(_T("-D_NR_OF_VIRTUAL_REGISTERS=8"));
        project.AddLinkerOption(_T("-D_CODEBANK_START=0"));
        project.AddLinkerOption(_T("-D_CODEBANK_END=0"));
        project.AddLinkerOption(_T("-D_XDATA_HEAP_SIZE=0xff"));
        project.AddLinkerOption(_T("-D_FAR_HEAP_SIZE=0xfff"));
        project.AddLinkerOption(_T("-D_HUGE_HEAP_SIZE=0xfff"));
        project.AddLinkerOption(_T("-D_FAR22_HEAP_SIZE=0xfff"));
        //project.AddLinkerOption(_T("-D_XDATA0_END=0x1fff"));
        //project.AddLinkerOption(_T("-D_CODE0_END=0xfbff"));
        project.AddLinkerOption(_T("-D?PBANK=0xD9"));
        project.AddLinkerOption(_T("-s __program_start"));
        // Debug build target
        local target = project.GetBuildTarget(Wizard.GetDebugName());
        if (!IsNull(target))
        {
            target.AddLinkerOption(_T("-l ") + Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + _T(".map"));
        }
        // Release build target
        target = project.GetBuildTarget(Wizard.GetReleaseName());
        if (!IsNull(target))
        {
            target.AddLinkerOption(_T("-l ") + Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + _T(".map"));
        }
        project.AddLinkerOption(_T("-xe"));
        project.AddLinkerOption(_T("-xm"));
        project.AddLinkerOption(_T("-xs"));
        project.AddLinkerOption(_T("-xo"));
        project.AddLinkerOption(_T("-f \"$(TARGET_COMPILER_DIR)") + wxFILE_SEP_PATH + _T("config") + wxFILE_SEP_PATH + _T("devices") + wxFILE_SEP_PATH + _T("AXSEM") + wxFILE_SEP_PATH + _T("lnk51ew_AX8052F100.xcl\""));
    }

    // Debug build target
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttConsoleOnly);
        target.SetTargetFilenameGenerationPolicy(tgfpPlatformDefault, tgfpNone);
        if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("sdcc*")))
        {
            target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + _T(".hex"));
        }
        else if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("iar8051")))
        {
            target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + _T(".ubr"));
        }
        else
        {
            target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + _T(".omf"));
        }
        target.SetUseConsoleRunner(false);
        // enable debugging symbols for this target
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }

    // Release build target
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttConsoleOnly);
        target.SetTargetFilenameGenerationPolicy(tgfpPlatformDefault, tgfpNone);
        if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("sdcc*")))
        {
            target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + _T(".hex"));
        }
        else if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("iar8051")))
        {
            target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + _T(".ubr"));
        }
        else
        {
            target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + _T(".omf"));
        }
        target.SetUseConsoleRunner(false);
        // enable optimizations for this target
        if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("keil*")))
        {
            OptimizationsOn(target, Wizard.GetCompilerID());
        }
    }

    return true;
}
